<?xml version="1.0" encoding="UTF-8" ?>
<SwiftMessageFormat name="MT295">
	<standard-version><![CDATA[SRG 2015]]></standard-version>
	<standard-release-qualifier>20150304</standard-release-qualifier>
	<DescriptiveName><![CDATA[Queries]]></DescriptiveName>
	<Category><![CDATA[Financial Institution Transfers]]></Category>
	<Description><![CDATA[This message type is: 

a) sent by a financial institution to another financial institution. 

b) sent by a corporate customer to a financial institution. 

c) sent by a financial institution to a corporate customer. 

It is used to request information or clarification relating to a previous SWIFT or non-SWIFT message or to one or more transactions contained therein. 

A query may also be sent to request that an amendment be made to a previous message, except in those cases where a specific message, or facility within a message, has been provided for this purpose in the related category, for example, MT 707, AMEND in field 22 of the MT 300. 

The category digit of the MT n95 Queries must be: 

a) If related to a SWIFT message, the category digit of the related message. 

b) If not related to a SWIFT message, the category digit which best describes the business purpose of the message. 

]]></Description>
	<SwiftFields>
		<customizable>true</customizable>
		<modifiable>true</modifiable>
		<SwiftMessageType>User</SwiftMessageType>
		<max-length>2000</max-length>
		<HeaderAndTrailerType>SWIFT_INPUT_OUTPUT_HEADER</HeaderAndTrailerType>
		<Header>
		</Header>
		<Data>
			<Fields>
				<SwiftField Name="20">
					<SwiftFieldDef Name="20">
						<Generic>false</Generic>
						<Description><![CDATA[Reference]]></Description>
						<Option Name="">
							<Format><![CDATA[16x]]></Format>
							<Specification><![CDATA[(Reference)]]></Specification>
							<Description><![CDATA[Transaction Reference Number]]></Description>
						</Option>
					</SwiftFieldDef>
					<Repeating>false</Repeating>
					<Presence>M</Presence>
					<Options> </Options>
					<Validations>
						<SubField Name="Reference">
							<Validation>
								<Options> </Options>
								<ErrorCode>T26</ErrorCode>
								<Comment><![CDATA[This field must not start or end with a slash '/' and must not contain two consecutive slashes '//'  (Error code(s): T26).]]></Comment>
								<ValidationPattern Type="T26">
								</ValidationPattern>
							</Validation>
						</SubField>
					</Validations>
				</SwiftField>
				<SwiftField Name="21">
					<SwiftFieldDef Name="21">
						<Generic>false</Generic>
						<Option Name="">
							<Format><![CDATA[16x]]></Format>
							<Specification><![CDATA[(Reference)]]></Specification>
							<Description><![CDATA[Related Reference]]></Description>
						</Option>
					</SwiftFieldDef>
					<Repeating>false</Repeating>
					<Presence>M</Presence>
					<Options> </Options>
					<Validations>
						<SubField Name="Reference">
							<Validation>
								<Options> </Options>
								<ErrorCode>T26</ErrorCode>
								<Comment><![CDATA[This field must not start or end with a slash '/' and must not contain two consecutive slashes '//'  (Error code(s): T26).]]></Comment>
								<ValidationPattern Type="T26">
								</ValidationPattern>
							</Validation>
						</SubField>
					</Validations>
				</SwiftField>
				<SwiftField Name="75">
					<SwiftFieldDef Name="75">
						<Generic>false</Generic>
						<Option Name="">
							<Format><![CDATA[6*35x]]></Format>
							<Specification><![CDATA[(Narrative)]]></Specification>
							<Description><![CDATA[Queries]]></Description>
						</Option>
					</SwiftFieldDef>
					<Repeating>false</Repeating>
					<Presence>M</Presence>
					<Options> </Options>
				</SwiftField>
				<SwiftField Name="77A">
					<SwiftFieldDef Name="77">
						<Generic>false</Generic>
						<Option Name="A">
							<Format><![CDATA[20*35x]]></Format>
							<Specification><![CDATA[(Narrative)]]></Specification>
							<Description><![CDATA[Narrative]]></Description>
						</Option>
					</SwiftFieldDef>
					<Repeating>false</Repeating>
					<Presence>O</Presence>
					<Options>A</Options>
				</SwiftField>
				<SwiftField Name="11a">
					<SwiftFieldDef Name="11">
						<Generic>false</Generic>
						<Description><![CDATA[Currency]]></Description>
						<Option Name="R">
							<Format><![CDATA[3!nCRLF6!n([CRLF4!n6!n])]]></Format>
							<Specification><![CDATA[(MT Number)(Date)(Session Number and ISN)]]></Specification>
							<Description><![CDATA[MT and Date of Original Message]]></Description>
						</Option>
						<Option Name="S">
							<Format><![CDATA[3!nCRLF6!n([CRLF4!n6!n])]]></Format>
							<Specification><![CDATA[(MT Number)(Date)(Session Number and ISN)]]></Specification>
							<Description><![CDATA[MT and Date of Original Message]]></Description>
						</Option>
					</SwiftFieldDef>
					<Repeating>false</Repeating>
					<Presence>O</Presence>
					<Options>R, S</Options>
					<Validations>
						<SubField Name="Date">
							<Validation>
								<Options>R, S</Options>
								<ErrorCode>T50</ErrorCode>
								<Comment><![CDATA[Date must be a valid date expressed as YYMMDD (Error code(s): T50).]]></Comment>
								<ValidationPattern Type="DATE">
									<Format>yyMMdd</Format>
								</ValidationPattern>
							</Validation>
						</SubField>
					</Validations>
				</SwiftField>
				<SwiftField Name="79">
					<SwiftFieldDef Name="79">
						<Generic>false</Generic>
						<Option Name="">
							<Format><![CDATA[35*50x]]></Format>
							<Specification><![CDATA[(Narrative)]]></Specification>
							<Description><![CDATA[Narrative Description of the Message to Which the Query Relates]]></Description>
						</Option>
					</SwiftFieldDef>
					<Repeating>false</Repeating>
					<Presence>O</Presence>
					<Options> </Options>
				</SwiftField>
				<CopyOfFields Name="Copy Of Fields">
					<Description><![CDATA[Copy of at least the Mandatory Fields of the Original Message]]></Description>
					<Mandatory>false</Mandatory>
				</CopyOfFields>
			</Fields>
		</Data>
		<Trailer>
		</Trailer>
	</SwiftFields>
	<validationrules>
		<hdrvalidationrules>
			<fieldvalidations>
				<fieldvalidation>
					<name>U09</name>
					<formula><![CDATA[if($this.Header.GetFieldIndex("User_Header") != -1) {
    def userHeader = $this.Header.GetSection("User_Header");
    if(userHeader.$size > 0 && userHeader[0].IsNotNull("Validation_Flag")) {
        return false;
    }
}
return true;
]]></formula>
					<severity>error</severity>
					<cascade>true</cascade>
					<error-code>U09</error-code>
					<actionmessage><![CDATA["User has used tag 119 in a message that is not a candidate for special processing"]]></actionmessage>
				</fieldvalidation>
			</fieldvalidations>
		</hdrvalidationrules>
		<datavalidationrules>
			<fieldvalidations>
				<fieldvalidation>
					<name>F11a-A</name>
					<fieldname>11a.MT_Number</fieldname>
					<formula><![CDATA[Between($value, 100, 999)]]></formula>
					<severity>error</severity>
					<cascade>true</cascade>
					<error-code>T18</error-code>
					<actionmessage><![CDATA["In field 11a, MT Number must be a number in the range 100 - 999."]]></actionmessage>
				</fieldvalidation>
				<fieldvalidation>
					<name>C1</name>
					<formula><![CDATA[If(F79.$size > 0, IsNull(Copy_Of_Fields), true)]]></formula>
					<severity>error</severity>
					<cascade>true</cascade>
					<error-code>C31</error-code>
					<actionmessage><![CDATA["Either field 79 or a 'Copy of at least the mandatory fields of the message to which the query relates', but not both, may be present in the message."]]></actionmessage>
				</fieldvalidation>
				<fieldvalidation>
					<name>FCP</name>
					<fieldname>Copy Of Fields</fieldname>
					<formula><![CDATA[def ActualValue = replace($value, "\r\n", "\n");
(FindFirst(ActualValue, "\n:77F:") == -1 && 
   FindFirst(ActualValue, "\n:77G:") == -1 && 
   FindFirst(ActualValue, "\n:77S:") == -1 && 
   FindFirst(ActualValue, "\n:77T:") == -1) && 
  (!StartsWith(ActualValue, ":77F:") && 
     !StartsWith(ActualValue, ":77G:") && 
     !StartsWith(ActualValue, ":77S:") && 
     !StartsWith(ActualValue, ":77T:"))]]></formula>
					<severity>error</severity>
					<cascade>true</cascade>
					<error-code>T13</error-code>
					<actionmessage><![CDATA["Tags 77F, 77G, 77S or 77T cannot appear in Copy Of Fields."]]></actionmessage>
				</fieldvalidation>
    	<fieldvalidation>
						<name>F-79</name>
						<fieldname>79.Narrative</fieldname>
						<formula><![CDATA[def Actualvalue = replace($value, "\r\n", "\n");
def lines = Split("\n", Actualvalue);
def str = Left(Actualvalue, 6);
def line1format = false;
def line3format = false;
def TREFformat = true;
def CHGSformat = true;
def TEXTformat = true;
def format = true;
def count = 0;
def TREFcount = 0;
def CHGScount = 0;
def TEXTcount = 0;
def i = lines.Length();
if(In(str, "/REJT/", "/RETN/")) {
        if(i <= 35) {
        //if '/REJT/' or '/RETN/' format of 1st line must be "6!x2!n[1a]['/'2c]" & format of 2nd line must be "('/'2!c 2!n'/')[44x]" or "('/X'1c2!n'/')[44x]"
            //if format of 2nd line is "('/'2!c 2!n'/')" then the 6 characters must be one of the codes given below
            line1format = (VerifyFormat(lines[0], "6!x2!n[1a]['/'2c]"));
            if(line1format && lines.Length() > 2) {
            if(!lines[1].StartsWith("/X")) {
                if(VerifyFormat(lines[1], "('/'2!c 2!n'/')[44x]")) {
                    def startStr = lines[1].Left(6);
                    if((!In(startStr, "/AC01/", "/AC02/", "/AC03/", "/AC04/", "/AC05/", "/AC06/", 
                            "/AM01/", "/AM02/", "/AM03/", "/AM04/", "/AM05/", "/AM06/", "/AM07/", 
                            "/AM08/", "/AG01/", "/AG02/", "/BE01/", "/BE02/", "/BE03/", "/BE04/", 
                            "/BE05/", "/DT01/", "/MS01/", "/PY01/", "/RC01/", "/RC02/", "/RC03/", 
                            "/RC04/", "/RF01/", "/TM01/", "/RR01/", "/RR02/", "/RR03/")))
                        return false;
                }
                else
                        return false;
                }
            else if(lines[1].StartsWith("/X") && !VerifyFormat(lines[1], "('/X'1c2!n'/')[44x]"))
                    return false;
            }
            else
                return false;
            //Line3 is mandatory and should have the format "/MREF/16x". Lines 4, 5 and 6 are optional
            //If lines 4, 5 or 6 or any combination exists and if the first 6 characters starts with either '/TREF/' or '/CHGS/' or '/TEXT/' or '//'
            //it should satisfy the format given. Also if line starts with '//' it can appear a max of 31 times
            line3format = Equal(Left(lines[2], 6), "/MREF/") && 
                            VerifyFormat(Substring(lines[2], 6), "16x");
            if(line3format) {
                while(i > 3) {
                    def str1 = Left(lines[i - 1], 6);
                    def str2 = Substring(lines[i - 1], 6);
                if(In(str1, "/TREF/", "/CHGS/", "/TEXT/") || StartsWith(lines[i - 1], "//")) {
                        if(str1 == "/TREF/") {
                            TREFformat = VerifyFormat(str2, "16x");
                            TREFcount += 1;
                        }
                        else if(str1 == "/CHGS/") {
                            CHGSformat = (VerifyFormat(str2, "3!a15d") && 
                                        IsISOCurrencyCode(Substring(lines[i - 1], 6, 3)));
                            CHGScount += 1;
                        }
                        else if(str1 == "/TEXT/") {
                            TEXTformat = (VerifyFormat(str2, "44x"));
                            TEXTcount += 1;
                        }
                        else if(StartsWith(lines[i - 1], "//")) {
                            def str3 = Substring(lines[i - 1], 2);
                            format = (VerifyFormat(str3, "48x"));
                            count += 1;
                            if(!format || count > 31)
                                break;
                        }
                    }
                    else
                        return false;
                    i = i - 1;
                }
            }
            else
                return false;
        if(!TREFformat || !CHGSformat || !TEXTformat || !format || count > 31 || TREFcount > 1 || 
             CHGScount > 1 || TEXTcount > 1)
                return false;
        }
        else
            return false;
}
return true;
]]></formula>
						<severity>error</severity>
						<cascade>true</cascade>
						<error-code>T80</error-code>
						<actionmessage><![CDATA["Field 79 Reject/Return: code word error, or mandatory code word missing, or code word not in the proper sequence or format 35*50 not satisfied"]]></actionmessage>
					</fieldvalidation>
					<fieldvalidation>
						<name>ERI</name>
						<fieldname>79.Narrative</fieldname>
						<formula><![CDATA[ApplyERICodeValidationUnstructured($value);]]></formula>
						<severity>error</severity>
						<cascade>true</cascade>
						<error-code>T47</error-code>
						<actionmessage><![CDATA["In an ERI field (i.e. fields 61, 72, 77A, 79, 86) the data part of a code word /OCMT/, or /CHGS/, is being validated, but the ending separator (i.e. third slash) is missing or the code words are duplicated."]]></actionmessage>
					</fieldvalidation>
			</fieldvalidations>
		</datavalidationrules>
		<tlrvalidationrules>
			<fieldvalidations>
			</fieldvalidations>
		</tlrvalidationrules>
	</validationrules>
</SwiftMessageFormat>

